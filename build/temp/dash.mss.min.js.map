{"version":3,"sources":["../node_modules/grunt-browserify/node_modules/browser-pack/_prelude.js","core/events/EventsBase.js","mss/MssEvents.js","mss/MssFragmentInfoController.js","mss/MssFragmentMoofProcessor.js","mss/MssFragmentMoovProcessor.js","mss/MssFragmentProcessor.js","mss/MssHandler.js","mss/index.js","mss/parser/MssParser.js","streaming/vo/DataChunk.js","streaming/vo/FragmentRequest.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","_dereq_","module","EventsBase","events","config","override","publicOnly","evt","hasOwnProperty","this","indexOf","MssEvents","_EventsBase","_get","Object","getPrototypeOf","prototype","FRAGMENT_INFO_LOADING_COMPLETED","mssEvents","MssFragmentInfoController","setup","initialize","started","startFragmentInfoDate","startTimeStampValue","deltaTime","segmentDuration","NaN","streamProcessor","registerExternalController","instance","type","getType","fragmentModel","getFragmentModel","indexHandler","getIndexHandler","getCurrentRepresentation","getRepresentationController","sendRequest","request","executeRequest","asFragmentInfoRequest","url","replace","onFragmentRequest","action","ACTION_COMPLETE","doStop","_fragmentInfoTime","startTime","duration","isFragmentLoadedOrPending","getNextSegmentRequest","log","bufferFragmentInfo","segmentTime","representation","getSegmentRequestForTime","delayLoadNextFragmentInfo","delay","delayMs","Math","round","min","clearTimeout","bufferTimeout","setTimeout","onFragmentInfoLoadedCompleted","fragmentInfo","deltaDate","undefined","deltaTimeStamp","response","_MssFragmentMoofProcessor2","context","create","metricsModel","playbackController","ISOBoxer","updateSegmentList","Date","getTime","startPlayback","doStart","segments","eventBus","on","_MssEvents2","presentationStartTime","off","reset","unregisterExternalController","controllerType","start","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory","MssFragmentMoofProcessor","processTfrf","tfrf","tfdt","representationController","manifest","adaptation","period","mpd","Period_asArray","index","AdaptationSet_asArray","timescale","SegmentTemplate","errorHandler","mssError","SegmentTimeline","S","entries","entry","segment","contentType","availabilityStartTime","range","tManifest","parseFloat","fragment_absolute_time","end","baseMediaDecodeTime","updateDVR","mediaType","getStreamInfo","manifestInfo","d","fragment_duration","push","timeShiftBufferDepth","splice","dvrInfos","getMetricsFor","DVRInfo","addDVRInfo","getBoxOffset","parent","offset","boxes","size","convertFragment","sp","isoFile","parseBuffer","tfhd","fetch","track_ID","mediaInfo","traf","createFullBox","version","flags","floor","trun","tfxd","_parent","sepiff","usertype","_saio","entry_count","saiz","sample_count","default_sample_info_size","sample_info_size","NumberOfEntries","moof","getLength","data_offset","saio","trafPosInMoof","sencPosInTraf","write","errHandler","MssFragmentMoovProcessor","createFtypBox","ftyp","createBox","major_brand","minor_version","compatible_brands","createMoovBox","moov","createMvhdBox","trak","createTkhdBox","mdia","createMdhdBox","createHdlrBox","minf","adaptationSet","constants","VIDEO","createVmhdBox","AUDIO","createSmhdBox","createDrefBox","stbl","_data","createStsdBox","createTrexBox","contentProtection","protectionController","createProtectionSystemSpecificHeaderBox","getSupportedKeySystemsFromContentProtection","mvhd","creation_time","modification_time","rate","volume","reserved1","reserved2","matrix","pre_defined","next_track_ID","trackId","tkhd","layer","alternate_group","reserved3","width","height","mdhd","language","lang","hdlr","handler_type","name","id","reserved","vmhd","graphicsmode","opcolor","smhd","balance","dinf","dref","location","stsd","createSampleEntry","codec","codecs","substring","createAVCVisualSampleEntry","createMP4AudioSampleEntry","message","data","avc1","data_reference_index","pre_defined1","pre_defined2","horizresolution","vertresolution","frame_count","compressorname","depth","pre_defined3","createAVC1ConfigurationRecord","sinf","createOriginalFormatBox","createSchemeTypeBox","createSchemeInformationBox","avcC","avcCLength","sps","pps","AVCProfileIndication","AVCLevelIndication","profile_compatibility","nalus","codecPrivateData","split","slice","naluBytes","_i","hexStringtoBuffer","NALUTYPE_SPS","NALUTYPE_PPS","Uint8Array","set","mp4a","channelcount","audioChannels","samplesize","reserved_3","samplerate","audioSamplingRate","esds","createMPEG4AACESDescriptor","audioSpecificConfig","esdsLength","bandwidth","data_format","stringToCharCode","schm","scheme_type","scheme_version","createTrackEncryptionBox","keySystems","pssh_bytes","pssh","parsedBuffer","initData","Utils","appendBox","schi","tenc","default_IsEncrypted","default_IV_size","default_KID","trex","default_sample_description_index","default_sample_duration","default_sample_size","default_sample_flags","str","buf","parseInt","charCodeAt","generateMoov","rep","ContentProtection","createFile","arrayEqual","arr1","arr2","every","element","saioProcessor","_procFullBox","_procField","_procFieldArray","saizProcessor","sencProcessor","_procEntries","_procEntryField","_procSubEntries","clearAndCryptedData","uuidProcessor","tfxdUserType","tfrfUserType","sepiffUserType","_parsing","fragment_count","MssFragmentProcessor","addBoxProcessor","_MssFragmentMoovProcessor2","processFragment","trigger","sender","MssHandler","onInitializationRequested","getStreamProcessor","_streamingVoFragmentRequest2","initSegmentType","quality","getMediaInfo","representationId","chunk","createDataChunk","FRAGMENT_LOADING_PROGRESS","bytes","mssFragmentProcessor","INIT_FRAGMENT_LOADED","streamId","endFragment","_streamingVoDataChunk2","segmentType","onSegmentMediaLoaded","error","onPlaybackSeekAsked","getIsDynamic","streamController","getStreamController","getActiveStreamProcessors","forEach","processor","FRAGMENTED_TEXT","alreadyRegistered","externalControllers","getExternalControllers","fragmentInfoController","_MssFragmentInfoController2","onTTMLPreProcess","ttmlSubtitles","registerEvents","INIT_REQUESTED","getSingletonFactoryByName","getClassName","EVENT_PRIORITY_HIGH","PLAYBACK_SEEK_ASKED","FRAGMENT_LOADING_COMPLETED","TTML_TO_PARSE","createMssParser","mssParser","_parserMssParser2","_MssFragmentProcessor2","window","global","_MssHandler2","MssParser","mediaPlayerModel","mapPeriod","smoothStreamingMedia","streams","getElementsByTagName","mapAdaptationSet","AdaptationSet","streamIndex","representations","segmentTemplate","qualityLevels","getAttribute","mimeType","mimeTypeMap","subType","maxWidth","maxHeight","ROLE","role","schemeIdUri","value","Role","Role_asArray","ACCESSIBILITY","accessibility","Accessibility","Accessibility_asArray","mapSegmentTemplate","BaseURL","Id","mapRepresentation","Representation","Representation_asArray","S_asArray","qualityLevel","fourCCValue","SUPPORTED_CODECS","toUpperCase","getH264Codec","getAACCodec","STPP","toString","nalHeader","exec","substr","objectType","samplingRate","codecPrivateDataHex","arr16","indexFreq","extensionSamplingFrequencyIndex","samplingFrequencyIndex","Channels","Uint16Array","setAttribute","mediaUrl","streamIndexTimeScale","media","mapSegmentTimeline","segmentTimeline","chunks","prevSegment","j","getKIDFromProtectionHeader","protectionHeader","prHeader","wrmHeader","xmlReader","KID","BASE64","decodeArray","firstChild","getWRMHeaderFromPRHeader","buffer","String","fromCharCode","apply","DOMParser","parseFromString","querySelector","textContent","convertUuidEndianness","recordType","recordLength","recordValue","subarray","uuid","swapBytes","pos1","pos2","temp","createPRContentProtection","pro","__text","__prefix","pro_asArray","createWidevineContentProtection","wvCencHeader","encodeASCII","processManifest","xmlDoc","manifestLoadedTime","contentProtections","protection","adaptations","timestampOffset","protocol","profiles","DEFAULT_TIME_SCALE","mediaPresentationDuration","Infinity","minBufferTime","getStableBufferTime","ttmlTimeIsRelative","refreshManifestOnSwitchTrack","doNotUpdateDVRWindowOnBufferUpdated","ignorePostponeTimePeriod","Period","ContentProtection_asArray","initialization","max","presentationTimeOffset","parseDOM","getMatchers","getIron","internalParse","performance","now","xmlParseTime","mss2dashTime","toPrecision","SUBT","CAPT","DESC","96000","88200","64000","48000","44100","32000","24000","22050","16000","12000","11025","8000","7350","video","audio","text","parse","DataChunk","FragmentRequest","ACTION_DOWNLOAD","serviceLocation","requestStartDate","firstByteDate","requestEndDate","availabilityEndTime","wallStartTime","bytesLoaded","bytesTotal","delayLoadingTime","responseType"],"mappings":"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","file":"dash.mss.min.js","sourceRoot":"./src/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../core/events/EventsBase';\n\nclass MssEvents extends EventsBase {\n\n    constructor() {\n        super();\n\n        this.FRAGMENT_INFO_LOADING_COMPLETED = 'fragmentInfoLoadingCompleted';\n    }\n}\n\nlet mssEvents = new MssEvents();\nexport default mssEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MssEvents from './MssEvents';\nimport MSSFragmentMoofProcessor from './MssFragmentMoofProcessor';\n\nfunction MssFragmentInfoController(config) {\n\n    config = config || {};\n    let context = this.context;\n\n    let instance;\n    let fragmentModel;\n    let indexHandler;\n    let started;\n    let type;\n    let bufferTimeout;\n    let _fragmentInfoTime;\n    let startFragmentInfoDate;\n    let startTimeStampValue;\n    let deltaTime;\n    let segmentDuration;\n\n    let streamProcessor = config.streamProcessor;\n    let eventBus = config.eventBus;\n    let metricsModel = config.metricsModel;\n    let playbackController = config.playbackController;\n    const ISOBoxer = config.ISOBoxer;\n    const log = config.log;\n\n    const controllerType = 'MssFragmentInfoController';\n\n    function setup() {\n    }\n\n    function initialize() {\n        started = false;\n\n        startFragmentInfoDate = null;\n        startTimeStampValue = null;\n        deltaTime = 0;\n        segmentDuration = NaN;\n\n        // register to stream processor as external controller\n        streamProcessor.registerExternalController(instance);\n        type = streamProcessor.getType();\n        fragmentModel = streamProcessor.getFragmentModel();\n        indexHandler = streamProcessor.getIndexHandler();\n    }\n\n    function getCurrentRepresentation() {\n        let representationController = streamProcessor.getRepresentationController();\n        let representation = representationController.getCurrentRepresentation();\n\n        return representation;\n    }\n\n    function sendRequest(request) {\n        fragmentModel.executeRequest(request);\n    }\n\n    function asFragmentInfoRequest(request) {\n        if (request && request.url) {\n            request.url = request.url.replace('Fragments', 'FragmentInfo');\n            request.type = 'FragmentInfoSegment';\n        }\n\n        return request;\n    }\n\n    function onFragmentRequest(request) {\n\n        // Check if current request signals end of stream\n        if ((request !== null) && (request.action === request.ACTION_COMPLETE)) {\n            doStop();\n            return;\n        }\n\n        if (request !== null) {\n            _fragmentInfoTime = request.startTime + request.duration;\n            request = asFragmentInfoRequest(request);\n\n            if (streamProcessor.getFragmentModel().isFragmentLoadedOrPending(request)) {\n                request = indexHandler.getNextSegmentRequest(getCurrentRepresentation());\n                onFragmentRequest(request);\n                return;\n            }\n\n            log('[FragmentInfoController][' + type + '] onFragmentRequest ' + request.url);\n\n            // Download the fragment info segment\n            sendRequest(request);\n        } else {\n            // No more fragment in current list\n            log('[FragmentInfoController][' + type + '] bufferFragmentInfo failed');\n        }\n    }\n\n    function bufferFragmentInfo() {\n        var segmentTime;\n\n        // Check if running state\n        if (!started) {\n            return;\n        }\n\n        log('[FragmentInfoController][' + type + '] Start buffering process...');\n\n        // Get next segment time\n        segmentTime = _fragmentInfoTime;\n\n        log('[FragmentInfoController][' + type + '] loadNextFragment for time: ' + segmentTime);\n\n        let representation = getCurrentRepresentation();\n        let request = indexHandler.getSegmentRequestForTime(representation, segmentTime);\n        onFragmentRequest(request);\n    }\n\n    function delayLoadNextFragmentInfo(delay) {\n        var delayMs = Math.round(Math.min((delay * 1000), 2000));\n\n        log('[FragmentInfoController][' + type + '] Check buffer delta = ' + delayMs + ' ms');\n\n        clearTimeout(bufferTimeout);\n        bufferTimeout = setTimeout(function () {\n            bufferTimeout = null;\n            bufferFragmentInfo();\n        }, delayMs);\n    }\n\n    function onFragmentInfoLoadedCompleted(e) {\n        if (e.streamProcessor !== streamProcessor) {\n            return;\n        }\n\n        let request = e.fragmentInfo.request;\n        let deltaDate,\n            deltaTimeStamp;\n\n\n        if (!e.fragmentInfo.response) {\n            log('[FragmentInfoController][' + type + '] ERROR loading ', request.url);\n            return;\n        }\n\n        segmentDuration = request.duration;\n        log('[FragmentInfoController][' + type + '] FragmentInfo loaded ', request.url);\n        try {\n\n            // update segment list\n            let mssFragmentMoofProcessor = MSSFragmentMoofProcessor(context).create({\n                metricsModel: metricsModel,\n                playbackController: playbackController,\n                ISOBoxer: ISOBoxer,\n                log: log\n            });\n            mssFragmentMoofProcessor.updateSegmentList(e.fragmentInfo, streamProcessor);\n\n            deltaDate = (new Date().getTime() - startFragmentInfoDate) / 1000;\n            deltaTimeStamp = (_fragmentInfoTime + segmentDuration) - startTimeStampValue;\n            deltaTime = (deltaTimeStamp - deltaDate) > 0 ? (deltaTimeStamp - deltaDate) : 0;\n            delayLoadNextFragmentInfo(deltaTime);\n        } catch (e) {\n            log('[FragmentInfoController][' + type + '] ERROR - Internal error while processing fragment info segment ');\n        }\n    }\n\n    function startPlayback() {\n        if (!started) {\n            return;\n        }\n\n        startFragmentInfoDate = new Date().getTime();\n        startTimeStampValue = _fragmentInfoTime;\n\n        log('[FragmentInfoController][' + type + '] startPlayback');\n\n        // Start buffering process\n        bufferFragmentInfo.call(this);\n    }\n\n    function doStart() {\n\n        let segments;\n\n        if (started === true) {\n            return;\n        }\n\n        eventBus.on(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance);\n\n        started = true;\n        log('[FragmentInfoController][' + type + '] START');\n\n        let representation = getCurrentRepresentation();\n        segments = representation.segments;\n\n        if (segments && segments.length > 0) {\n            _fragmentInfoTime = segments[segments.length - 1].presentationStartTime - segments[segments.length - 1].duration;\n\n            startPlayback();\n        } else {\n            indexHandler.updateSegmentList(representation);\n            segments = representation.segments;\n            if (segments && segments.length > 0) {\n                _fragmentInfoTime = segments[segments.length - 1].presentationStartTime - segments[segments.length - 1].duration;\n            }\n\n            startPlayback();\n        }\n    }\n\n    function doStop() {\n        if (!started) {\n            return;\n        }\n        log('[FragmentInfoController][' + type + '] STOP');\n\n        eventBus.off(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance);\n\n        // Stop buffering process\n        clearTimeout(bufferTimeout);\n        started = false;\n\n        startFragmentInfoDate = null;\n        startTimeStampValue = null;\n    }\n\n    function reset() {\n        doStop();\n        streamProcessor.unregisterExternalController(instance);\n    }\n\n    instance = {\n        initialize: initialize,\n        controllerType: controllerType,\n        start: doStart,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssFragmentInfoController.__dashjs_factory_name = 'MssFragmentInfoController';\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentInfoController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @module MssFragmentMoovProcessor\n * @param {Object} config object\n */\nfunction MssFragmentMoofProcessor(config) {\n\n    config = config || {};\n    let instance;\n    let metricsModel = config.metricsModel;\n    let playbackController = config.playbackController;\n    let errorHandler = config.errHandler;\n    const ISOBoxer = config.ISOBoxer;\n    const log = config.log;\n\n    function setup() {\n    }\n\n    function processTfrf(request, tfrf, tfdt, streamProcessor) {\n        let representationController = streamProcessor.getRepresentationController();\n        let representation = representationController.getCurrentRepresentation();\n        let indexHandler = streamProcessor.getIndexHandler();\n\n        let manifest = representation.adaptation.period.mpd.manifest;\n        let adaptation = manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index];\n        let timescale = adaptation.SegmentTemplate.timescale;\n\n        if (manifest.type !== 'dynamic') {\n            return;\n        }\n\n        if (!tfrf) {\n            errorHandler.mssError('MSS_NO_TFRF : Missing tfrf in live media segment');\n            return;\n        }\n\n        // Get adaptation's segment timeline (always a SegmentTimeline in Smooth Streaming use case)\n        let segments = adaptation.SegmentTemplate.SegmentTimeline.S;\n        let entries = tfrf.entry;\n        let entry,\n            segmentTime;\n        let segment = null;\n        let type = adaptation.contentType;\n        let t = 0;\n        let availabilityStartTime = null;\n        let range;\n\n        if (entries.length === 0) {\n            return;\n        }\n\n        // Consider only first tfrf entry (to avoid pre-condition failure on fragment info requests)\n        entry = entries[0];\n\n        // Get last segment time\n        segmentTime = segments[segments.length - 1].tManifest ? parseFloat(segments[segments.length - 1].tManifest) : segments[segments.length - 1].t;\n\n        // Check if we have to append new segment to timeline\n        if (entry.fragment_absolute_time <= segmentTime) {\n\n            // Update DVR window range\n            // => set range end to end time of current segment\n            range = {\n                start: segments[0].t / adaptation.SegmentTemplate.timescale,\n                end: (tfdt.baseMediaDecodeTime / adaptation.SegmentTemplate.timescale) + request.duration\n            };\n\n            updateDVR(request.mediaType, range, streamProcessor.getStreamInfo().manifestInfo);\n            return;\n        }\n\n        log('[MssFragmentMoofProcessor][', type,'] Add new segment - t = ', (entry.fragment_absolute_time / timescale));\n        segment = {};\n        segment.t = entry.fragment_absolute_time;\n        segment.d = entry.fragment_duration;\n        segments.push(segment);\n\n        //\n        if (manifest.timeShiftBufferDepth && manifest.timeShiftBufferDepth > 0) {\n            // Get timestamp of the last segment\n            segment = segments[segments.length - 1];\n            t = segment.t;\n\n            // Determine the segments' availability start time\n            availabilityStartTime = t - (manifest.timeShiftBufferDepth * timescale);\n\n            // Remove segments prior to availability start time\n            segment = segments[0];\n            while (segment.t < availabilityStartTime) {\n                log('[MssFragmentMoofProcessor]Remove segment  - t = ' + (segment.t / timescale));\n                segments.splice(0, 1);\n                segment = segments[0];\n            }\n\n            // Update DVR window range\n            // => set range end to end time of current segment\n            range = {\n                start: segments[0].t / adaptation.SegmentTemplate.timescale,\n                end: (tfdt.baseMediaDecodeTime / adaptation.SegmentTemplate.timescale) + request.duration\n            };\n\n            updateDVR(request.mediaType, range, streamProcessor.getStreamInfo().manifestInfo);\n        }\n\n        indexHandler.updateSegmentList(representation);\n    }\n\n    function updateDVR(type, range, manifestInfo) {\n        let dvrInfos = metricsModel.getMetricsFor(type).DVRInfo;\n        if (dvrInfos) {\n            if (dvrInfos.length === 0 || (dvrInfos.length > 0 && range.end > dvrInfos[dvrInfos.length - 1].range.end)) {\n                log('[MssFragmentMoofProcessor][', type, '] Update DVR Infos [' + range.start + ' - ' + range.end + ']');\n                metricsModel.addDVRInfo(type, playbackController.getTime(), manifestInfo, range);\n            }\n        }\n    }\n\n    // This function returns the offset of the 1st byte of a child box within a container box\n    function getBoxOffset(parent, type) {\n        let offset = 8;\n        let i = 0;\n\n        for (i = 0; i < parent.boxes.length; i++) {\n            if (parent.boxes[i].type === type) {\n                return offset;\n            }\n            offset += parent.boxes[i].size;\n        }\n        return offset;\n    }\n\n    function convertFragment(e, sp) {\n\n        let i;\n\n        // e.request contains request description object\n        // e.response contains fragment bytes\n        let isoFile = ISOBoxer.parseBuffer(e.response);\n        // Update track_Id in tfhd box\n        let tfhd = isoFile.fetch('tfhd');\n        tfhd.track_ID = e.request.mediaInfo.index + 1;\n\n        // Add tfdt box\n        let tfdt = isoFile.fetch('tfdt');\n        let traf = isoFile.fetch('traf');\n        if (tfdt === null) {\n            tfdt = ISOBoxer.createFullBox('tfdt', traf, tfhd);\n            tfdt.version = 1;\n            tfdt.flags = 0;\n            tfdt.baseMediaDecodeTime = Math.floor(e.request.startTime * e.request.timescale);\n        }\n\n        let trun = isoFile.fetch('trun');\n\n        // Process tfxd boxes\n        // This box provide absolute timestamp but we take the segment start time for tfdt\n        let tfxd = isoFile.fetch('tfxd');\n        if (tfxd) {\n            tfxd._parent.boxes.splice(tfxd._parent.boxes.indexOf(tfxd), 1);\n            tfxd = null;\n        }\n        let tfrf = isoFile.fetch('tfrf');\n        processTfrf(e.request, tfrf, tfdt, sp);\n        if (tfrf) {\n            tfrf._parent.boxes.splice(tfrf._parent.boxes.indexOf(tfrf), 1);\n            tfrf = null;\n        }\n\n        // If protected content in PIFF1.1 format (sepiff box = Sample Encryption PIFF)\n        // => convert sepiff box it into a senc box\n        // => create saio and saiz boxes (if not already present)\n        let sepiff = isoFile.fetch('sepiff');\n        if (sepiff !== null) {\n            sepiff.type = 'senc';\n            sepiff.usertype = undefined;\n\n            let saio = isoFile.fetch('saio');\n            if (saio === null) {\n                // Create Sample Auxiliary Information Offsets Box box (saio)\n                saio = ISOBoxer.createFullBox('saio', traf);\n                saio.version = 0;\n                saio.flags = 0;\n                saio.entry_count = 1;\n                saio.offset = [0];\n\n                let saiz = ISOBoxer.createFullBox('saiz', traf);\n                saiz.version = 0;\n                saiz.flags = 0;\n                saiz.sample_count = sepiff.sample_count;\n                saiz.default_sample_info_size = 0;\n                saiz.sample_info_size = [];\n\n                if (sepiff.flags & 0x02) {\n                    // Sub-sample encryption => set sample_info_size for each sample\n                    for (i = 0; i < sepiff.sample_count; i += 1) {\n                        // 10 = 8 (InitializationVector field size) + 2 (subsample_count field size)\n                        // 6 = 2 (BytesOfClearData field size) + 4 (BytesOfEncryptedData field size)\n                        saiz.sample_info_size[i] = 10 + (6 * sepiff.entry[i].NumberOfEntries);\n                    }\n                } else {\n                    // No sub-sample encryption => set default sample_info_size = InitializationVector field size (8)\n                    saiz.default_sample_info_size = 8;\n                }\n            }\n        }\n\n        tfhd.flags &= 0xFFFFFE; // set tfhd.base-data-offset-present to false\n        tfhd.flags |= 0x020000; // set tfhd.default-base-is-moof to true\n        trun.flags |= 0x000001; // set trun.data-offset-present to true\n\n        // Update trun.data_offset field that corresponds to first data byte (inside mdat box)\n        let moof = isoFile.fetch('moof');\n        let length = moof.getLength();\n        trun.data_offset = length + 8;\n\n        // Update saio box offset field according to new senc box offset\n        let saio = isoFile.fetch('saio');\n        if (saio !== null) {\n            let trafPosInMoof = getBoxOffset(moof, 'traf');\n            let sencPosInTraf = getBoxOffset(traf, 'senc');\n            // Set offset from begin fragment to the first IV field in senc box\n            saio.offset[0] = trafPosInMoof + sencPosInTraf + 16; // 16 = box header (12) + sample_count field size (4)\n        }\n\n        // Write transformed/processed fragment into request reponse data\n        e.response = isoFile.write();\n    }\n\n    function updateSegmentList(e, sp) {\n\n        // e.request contains request description object\n        // e.response contains fragment bytes\n        if (!e.response) {\n            throw new Error('e.response parameter is missing');\n        }\n\n        let isoFile = ISOBoxer.parseBuffer(e.response);\n        // Update track_Id in tfhd box\n        let tfhd = isoFile.fetch('tfhd');\n        tfhd.track_ID = e.request.mediaInfo.index + 1;\n\n        // Add tfdt box\n        let tfdt = isoFile.fetch('tfdt');\n        let traf = isoFile.fetch('traf');\n        if (tfdt === null) {\n            tfdt = ISOBoxer.createFullBox('tfdt', traf, tfhd);\n            tfdt.version = 1;\n            tfdt.flags = 0;\n            tfdt.baseMediaDecodeTime = Math.floor(e.request.startTime * e.request.timescale);\n        }\n\n        let tfrf = isoFile.fetch('tfrf');\n        processTfrf(e.request, tfrf, tfdt, sp);\n        if (tfrf) {\n            tfrf._parent.boxes.splice(tfrf._parent.boxes.indexOf(tfrf), 1);\n            tfrf = null;\n        }\n    }\n\n    instance = {\n        convertFragment: convertFragment,\n        updateSegmentList: updateSegmentList\n    };\n\n    setup();\n    return instance;\n}\n\nMssFragmentMoofProcessor.__dashjs_factory_name = 'MssFragmentMoofProcessor';\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentMoofProcessor); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @module MssFragmentMoovProcessor\n * @param {Object} config object\n */\nfunction MssFragmentMoovProcessor(config) {\n    config = config || {};\n    const NALUTYPE_SPS = 7;\n    const NALUTYPE_PPS = 8;\n    const constants = config.constants;\n    const ISOBoxer = config.ISOBoxer;\n\n    let protectionController = config.protectionController;\n    let instance,\n        period,\n        adaptationSet,\n        representation,\n        contentProtection,\n        timescale,\n        trackId;\n\n    function createFtypBox(isoFile) {\n        let ftyp = ISOBoxer.createBox('ftyp', isoFile);\n        ftyp.major_brand = 'iso6';\n        ftyp.minor_version = 1; // is an informative integer for the minor version of the major brand\n        ftyp.compatible_brands = []; //is a list, to the end of the box, of brands isom, iso6 and msdh\n        ftyp.compatible_brands[0] = 'isom'; // => decimal ASCII value for isom\n        ftyp.compatible_brands[1] = 'iso6'; // => decimal ASCII value for iso6\n        ftyp.compatible_brands[2] = 'msdh'; // => decimal ASCII value for msdh\n\n        return ftyp;\n    }\n\n    function createMoovBox(isoFile) {\n\n        // moov box\n        let moov = ISOBoxer.createBox('moov', isoFile);\n\n        // moov/mvhd\n        createMvhdBox(moov);\n\n        // moov/trak\n        let trak = ISOBoxer.createBox('trak', moov);\n\n        // moov/trak/tkhd\n        createTkhdBox(trak);\n\n        // moov/trak/mdia\n        let mdia = ISOBoxer.createBox('mdia', trak);\n\n        // moov/trak/mdia/mdhd\n        createMdhdBox(mdia);\n\n        // moov/trak/mdia/hdlr\n        createHdlrBox(mdia);\n\n        // moov/trak/mdia/minf\n        let minf = ISOBoxer.createBox('minf', mdia);\n\n        switch (adaptationSet.type) {\n            case constants.VIDEO:\n                // moov/trak/mdia/minf/vmhd\n                createVmhdBox(minf);\n                break;\n            case constants.AUDIO:\n                // moov/trak/mdia/minf/smhd\n                createSmhdBox(minf);\n                break;\n            default:\n                break;\n        }\n\n        // moov/trak/mdia/minf/dinf\n        let dinf = ISOBoxer.createBox('dinf', minf);\n\n        // moov/trak/mdia/minf/dinf/dref\n        createDrefBox(dinf);\n\n        // moov/trak/mdia/minf/stbl\n        let stbl = ISOBoxer.createBox('stbl', minf);\n\n        // Create empty stts, stsc, stco and stsz boxes\n        // Use data field as for codem-isoboxer unknown boxes for setting fields value\n\n        // moov/trak/mdia/minf/stbl/stts\n        let stts = ISOBoxer.createFullBox('stts', stbl);\n        stts._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsc\n        let stsc = ISOBoxer.createFullBox('stsc', stbl);\n        stsc._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stco\n        let stco = ISOBoxer.createFullBox('stco', stbl);\n        stco._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsz\n        let stsz = ISOBoxer.createFullBox('stsz', stbl);\n        stsz._data = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, sample_size = 0, sample_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsd\n        createStsdBox(stbl);\n\n        // moov/mvex\n        let mvex = ISOBoxer.createBox('mvex', moov);\n\n        // moov/mvex/trex\n        createTrexBox(mvex);\n\n        if (contentProtection && protectionController) {\n            let supportedKS = protectionController.getSupportedKeySystemsFromContentProtection(contentProtection);\n            createProtectionSystemSpecificHeaderBox(moov, supportedKS);\n        }\n    }\n\n    function createMvhdBox(moov) {\n\n        let mvhd = ISOBoxer.createFullBox('mvhd', moov);\n\n        mvhd.version = 1; // version = 1  in order to have 64bits duration value\n\n        mvhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        mvhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        mvhd.timescale = timescale; // the time-scale for the entire presentation => 10000000 for MSS\n        mvhd.duration = Math.round(period.duration * timescale); // the length of the presentation (in the indicated timescale) =>  take duration of period\n        mvhd.rate = 1.0; // 16.16 number, '1.0' = normal playback\n        mvhd.volume = 1.0; // 8.8 number, '1.0' = full volume\n        mvhd.reserved1 = 0;\n        mvhd.reserved2 = [0x0, 0x0];\n        mvhd.matrix = [\n            1, 0, 0, // provides a transformation matrix for the video;\n            0, 1, 0, // (u,v,w) are restricted here to (0,0,1)\n            0, 0, 16384\n        ];\n        mvhd.pre_defined = [0, 0, 0, 0, 0, 0];\n        mvhd.next_track_ID = trackId + 1; // indicates a value to use for the track ID of the next track to be added to this presentation\n\n        return mvhd;\n    }\n\n    function createTkhdBox(trak) {\n\n        let tkhd = ISOBoxer.createFullBox('tkhd', trak);\n\n        tkhd.version = 1; // version = 1  in order to have 64bits duration value\n        tkhd.flags = 0x1 | // Track_enabled (0x000001): Indicates that the track is enabled\n            0x2 | // Track_in_movie (0x000002):  Indicates that the track is used in the presentation\n            0x4; // Track_in_preview (0x000004):  Indicates that the track is used when previewing the presentation\n\n        tkhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        tkhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        tkhd.track_ID = trackId; // uniquely identifies this track over the entire life-time of this presentation\n        tkhd.reserved1 = 0;\n        tkhd.duration = Math.round(period.duration * timescale); // the duration of this track (in the timescale indicated in the Movie Header Box) =>  take duration of period\n        tkhd.reserved2 = [0x0, 0x0];\n        tkhd.layer = 0; // specifies the front-to-back ordering of video tracks; tracks with lower numbers are closer to the viewer => 0 since only one video track\n        tkhd.alternate_group = 0; // specifies a group or collection of tracks => ignore\n        tkhd.volume = 1.0; // '1.0' = full volume\n        tkhd.reserved3 = 0;\n        tkhd.matrix = [\n            1, 0, 0, // provides a transformation matrix for the video;\n            0, 1, 0, // (u,v,w) are restricted here to (0,0,1)\n            0, 0, 16384\n        ];\n        tkhd.width = representation.width; // visual presentation width\n        tkhd.height = representation.height; // visual presentation height\n\n        return tkhd;\n    }\n\n    function createMdhdBox(mdia) {\n\n        let mdhd = ISOBoxer.createFullBox('mdhd', mdia);\n\n        mdhd.version = 1; // version = 1  in order to have 64bits duration value\n\n        mdhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        mdhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        mdhd.timescale = timescale; // the time-scale for the entire presentation\n        mdhd.duration = Math.round(period.duration * timescale); // the duration of this media (in the scale of the timescale). If the duration cannot be determined then duration is set to all 1s.\n        mdhd.language = adaptationSet.lang || 'und'; // declares the language code for this media (see getLanguageCode())\n        mdhd.pre_defined = 0;\n\n        return mdhd;\n    }\n\n    function createHdlrBox(mdia) {\n\n        let hdlr = ISOBoxer.createFullBox('hdlr', mdia);\n\n        hdlr.pre_defined = 0;\n        switch (adaptationSet.type) {\n            case constants.VIDEO:\n                hdlr.handler_type = 'vide';\n                break;\n            case constants.AUDIO:\n                hdlr.handler_type = 'soun';\n                break;\n            default:\n                hdlr.handler_type = 'meta';\n                break;\n        }\n        hdlr.name = representation.id;\n        hdlr.reserved = [0, 0, 0];\n\n        return hdlr;\n    }\n\n    function createVmhdBox(minf) {\n\n        let vmhd = ISOBoxer.createFullBox('vmhd', minf);\n\n        vmhd.flags = 1;\n\n        vmhd.graphicsmode = 0; // specifies a composition mode for this video track, from the following enumerated set, which may be extended by derived specifications: copy = 0 copy over the existing image\n        vmhd.opcolor = [0, 0, 0]; // is a set of 3 colour values (red, green, blue) available for use by graphics modes\n\n        return vmhd;\n    }\n\n    function createSmhdBox(minf) {\n\n        let smhd = ISOBoxer.createFullBox('smhd', minf);\n\n        smhd.flags = 1;\n\n        smhd.balance = 0; // is a fixed-point 8.8 number that places mono audio tracks in a stereo space; 0 is centre (the normal value); full left is -1.0 and full right is 1.0.\n        smhd.reserved = 0;\n\n        return smhd;\n    }\n\n    function createDrefBox(dinf) {\n\n        let dref = ISOBoxer.createFullBox('dref', dinf);\n\n        dref.entry_count = 1;\n        dref.entries = [];\n\n        let url = ISOBoxer.createFullBox('url ', dref, false);\n        url.location = '';\n        url.flags = 1;\n\n        dref.entries.push(url);\n\n        return dref;\n    }\n\n    function createStsdBox(stbl) {\n\n        let stsd = ISOBoxer.createFullBox('stsd', stbl);\n\n        stsd.entries = [];\n        switch (adaptationSet.type) {\n            case constants.VIDEO:\n            case constants.AUDIO:\n                stsd.entries.push(createSampleEntry(stsd));\n                break;\n            default:\n                break;\n        }\n\n        stsd.entry_count = stsd.entries.length; // is an integer that counts the actual entries\n        return stsd;\n    }\n\n    function createSampleEntry(stsd) {\n        let codec = representation.codecs.substring(0, representation.codecs.indexOf('.'));\n\n        switch (codec) {\n            case 'avc1':\n                return createAVCVisualSampleEntry(stsd, codec);\n            case 'mp4a':\n                return createMP4AudioSampleEntry(stsd, codec);\n            default:\n                throw {\n                    name: 'Unsupported codec',\n                    message: 'Unsupported codec',\n                    data: {\n                        codec: codec\n                    }\n                };\n        }\n    }\n\n    function createAVCVisualSampleEntry(stsd, codec) {\n        let avc1;\n\n        if (contentProtection) {\n            avc1 = ISOBoxer.createBox('encv', stsd, false);\n        } else {\n            avc1 = ISOBoxer.createBox('avc1', stsd, false);\n        }\n\n        // SampleEntry fields\n        avc1.reserved1 = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n        avc1.data_reference_index = 1;\n\n        // VisualSampleEntry fields\n        avc1.pre_defined1 = 0;\n        avc1.reserved2 = 0;\n        avc1.pre_defined2 = [0, 0, 0];\n        avc1.height = representation.height;\n        avc1.width = representation.width;\n        avc1.horizresolution = 72; // 72 dpi\n        avc1.vertresolution = 72; // 72 dpi\n        avc1.reserved3 = 0;\n        avc1.frame_count = 1; // 1 compressed video frame per sample\n        avc1.compressorname = [\n            0x0A, 0x41, 0x56, 0x43, 0x20, 0x43, 0x6F, 0x64, // = 'AVC Coding';\n            0x69, 0x6E, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n        ];\n        avc1.depth = 0x0018; // 0x0018 – images are in colour with no alpha.\n        avc1.pre_defined3 = 65535;\n        avc1.config = createAVC1ConfigurationRecord();\n        if (contentProtection) {\n            // Create and add Protection Scheme Info Box\n            let sinf = ISOBoxer.createBox('sinf', avc1);\n\n            // Create and add Original Format Box => indicate codec type of the encrypted content\n            createOriginalFormatBox(sinf, codec);\n\n            // Create and add Scheme Type box\n            createSchemeTypeBox(sinf);\n\n            // Create and add Scheme Information Box\n            createSchemeInformationBox(sinf);\n        }\n\n        return avc1;\n    }\n\n    function createAVC1ConfigurationRecord() {\n\n        let avcC = null;\n        let avcCLength = 15; // length = 15 by default (0 SPS and 0 PPS)\n\n        // First get all SPS and PPS from codecPrivateData\n        let sps = [];\n        let pps = [];\n        let AVCProfileIndication = 0;\n        let AVCLevelIndication = 0;\n        let profile_compatibility = 0;\n\n\n        let nalus = representation.codecPrivateData.split('00000001').slice(1);\n        let naluBytes, naluType;\n\n        for (let i = 0; i < nalus.length; i++) {\n            naluBytes = hexStringtoBuffer(nalus[i]);\n\n            naluType = naluBytes[0] & 0x1F;\n\n            switch (naluType) {\n                case NALUTYPE_SPS:\n                    sps.push(naluBytes);\n                    avcCLength += naluBytes.length + 2; // 2 = sequenceParameterSetLength field length\n                    break;\n                case NALUTYPE_PPS:\n                    pps.push(naluBytes);\n                    avcCLength += naluBytes.length + 2; // 2 = pictureParameterSetLength field length\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        // Get profile and level from SPS\n        if (sps.length > 0) {\n            AVCProfileIndication = sps[0][1];\n            profile_compatibility = sps[0][2];\n            AVCLevelIndication = sps[0][3];\n        }\n\n        // Generate avcC buffer\n        avcC = new Uint8Array(avcCLength);\n\n        let i = 0;\n        // length\n        avcC[i++] = (avcCLength & 0xFF000000) >> 24;\n        avcC[i++] = (avcCLength & 0x00FF0000) >> 16;\n        avcC[i++] = (avcCLength & 0x0000FF00) >> 8;\n        avcC[i++] = (avcCLength & 0x000000FF);\n        avcC.set([0x61, 0x76, 0x63, 0x43], i); // type = 'avcC'\n        i += 4;\n        avcC[i++] = 1; // configurationVersion = 1\n        avcC[i++] = AVCProfileIndication;\n        avcC[i++] = profile_compatibility;\n        avcC[i++] = AVCLevelIndication;\n        avcC[i++] = 0xFF; // '11111' + lengthSizeMinusOne = 3\n        avcC[i++] = 0xE0 | sps.length; // '111' + numOfSequenceParameterSets\n        for (let n = 0; n < sps.length; n++) {\n            avcC[i++] = (sps[n].length & 0xFF00) >> 8;\n            avcC[i++] = (sps[n].length & 0x00FF);\n            avcC.set(sps[n], i);\n            i += sps[n].length;\n        }\n        avcC[i++] = pps.length; // numOfPictureParameterSets\n        for (let n = 0; n < pps.length; n++) {\n            avcC[i++] = (pps[n].length & 0xFF00) >> 8;\n            avcC[i++] = (pps[n].length & 0x00FF);\n            avcC.set(pps[n], i);\n            i += pps[n].length;\n        }\n\n        return avcC;\n    }\n\n    function createMP4AudioSampleEntry(stsd, codec) {\n        let mp4a;\n\n        if (contentProtection) {\n            mp4a = ISOBoxer.createBox('enca', stsd, false);\n        } else {\n            mp4a = ISOBoxer.createBox('mp4a', stsd, false);\n        }\n\n        // SampleEntry fields\n        mp4a.reserved1 = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n        mp4a.data_reference_index = 1;\n\n        // AudioSampleEntry fields\n        mp4a.reserved2 = [0x0, 0x0];\n        mp4a.channelcount = representation.audioChannels;\n        mp4a.samplesize = 16;\n        mp4a.pre_defined = 0;\n        mp4a.reserved_3 = 0;\n        mp4a.samplerate = representation.audioSamplingRate << 16;\n\n        mp4a.esds = createMPEG4AACESDescriptor();\n\n        if (contentProtection) {\n            // Create and add Protection Scheme Info Box\n            let sinf = ISOBoxer.createBox('sinf', mp4a);\n\n            // Create and add Original Format Box => indicate codec type of the encrypted content\n            createOriginalFormatBox(sinf, codec);\n\n            // Create and add Scheme Type box\n            createSchemeTypeBox(sinf);\n\n            // Create and add Scheme Information Box\n            createSchemeInformationBox(sinf);\n        }\n\n        return mp4a;\n    }\n\n    function createMPEG4AACESDescriptor() {\n\n        // AudioSpecificConfig (see ISO/IEC 14496-3, subpart 1) => corresponds to hex bytes contained in 'codecPrivateData' field\n        let audioSpecificConfig = hexStringtoBuffer(representation.codecPrivateData);\n\n        // ESDS length = esds box header length (= 12) +\n        //               ES_Descriptor header length (= 5) +\n        //               DecoderConfigDescriptor header length (= 15) +\n        //               decoderSpecificInfo header length (= 2) +\n        //               AudioSpecificConfig length (= codecPrivateData length)\n        let esdsLength = 34 + audioSpecificConfig.length;\n        let esds = new Uint8Array(esdsLength);\n\n        let i = 0;\n        // esds box\n        esds[i++] = (esdsLength & 0xFF000000) >> 24; // esds box length\n        esds[i++] = (esdsLength & 0x00FF0000) >> 16; // ''\n        esds[i++] = (esdsLength & 0x0000FF00) >> 8; // ''\n        esds[i++] = (esdsLength & 0x000000FF); // ''\n        esds.set([0x65, 0x73, 0x64, 0x73], i); // type = 'esds'\n        i += 4;\n        esds.set([0, 0, 0, 0], i); // version = 0, flags = 0\n        i += 4;\n        // ES_Descriptor (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x03; // tag = 0x03 (ES_DescrTag)\n        esds[i++] = 20 + audioSpecificConfig.length; // size\n        esds[i++] = (trackId & 0xFF00) >> 8; // ES_ID = track_id\n        esds[i++] = (trackId & 0x00FF); // ''\n        esds[i++] = 0; // flags and streamPriority\n\n        // DecoderConfigDescriptor (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x04; // tag = 0x04 (DecoderConfigDescrTag)\n        esds[i++] = 15 + audioSpecificConfig.length; // size\n        esds[i++] = 0x40; // objectTypeIndication = 0x40 (MPEG-4 AAC)\n        esds[i] = 0x05 << 2; // streamType = 0x05 (Audiostream)\n        esds[i] |= 0 << 1; // upStream = 0\n        esds[i++] |= 1; // reserved = 1\n        esds[i++] = 0xFF; // buffersizeDB = undefined\n        esds[i++] = 0xFF; // ''\n        esds[i++] = 0xFF; // ''\n        esds[i++] = (representation.bandwidth & 0xFF000000) >> 24; // maxBitrate\n        esds[i++] = (representation.bandwidth & 0x00FF0000) >> 16; // ''\n        esds[i++] = (representation.bandwidth & 0x0000FF00) >> 8; // ''\n        esds[i++] = (representation.bandwidth & 0x000000FF); // ''\n        esds[i++] = (representation.bandwidth & 0xFF000000) >> 24; // avgbitrate\n        esds[i++] = (representation.bandwidth & 0x00FF0000) >> 16; // ''\n        esds[i++] = (representation.bandwidth & 0x0000FF00) >> 8; // ''\n        esds[i++] = (representation.bandwidth & 0x000000FF); // ''\n\n        // DecoderSpecificInfo (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x05; // tag = 0x05 (DecSpecificInfoTag)\n        esds[i++] = audioSpecificConfig.length; // size\n        esds.set(audioSpecificConfig, i); // AudioSpecificConfig bytes\n\n        return esds;\n    }\n\n    function createOriginalFormatBox(sinf, codec) {\n        let frma = ISOBoxer.createBox('frma', sinf);\n        frma.data_format = stringToCharCode(codec);\n    }\n\n    function createSchemeTypeBox(sinf) {\n        let schm = ISOBoxer.createFullBox('schm', sinf);\n\n        schm.flags = 0;\n        schm.version = 0;\n        schm.scheme_type = 0x63656E63; // 'cenc' => common encryption\n        schm.scheme_version = 0x00010000; // version set to 0x00010000 (Major version 1, Minor version 0)\n    }\n\n    function createSchemeInformationBox(sinf) {\n        let schi = ISOBoxer.createBox('schi', sinf);\n\n        // Create and add Track Encryption Box\n        createTrackEncryptionBox(schi);\n    }\n\n    function createProtectionSystemSpecificHeaderBox(moov, keySystems) {\n        let pssh_bytes;\n        let pssh;\n        let i;\n        let parsedBuffer;\n\n        for (i = 0; i < keySystems.length; i += 1) {\n            pssh_bytes = keySystems[i].initData;\n            parsedBuffer = ISOBoxer.parseBuffer(pssh_bytes);\n            pssh = parsedBuffer.fetch('pssh');\n            if (pssh) {\n                ISOBoxer.Utils.appendBox(moov, pssh);\n            }\n        }\n    }\n\n    function createTrackEncryptionBox(schi) {\n        let tenc = ISOBoxer.createFullBox('tenc', schi);\n\n        tenc.flags = 0;\n        tenc.version = 0;\n\n        tenc.default_IsEncrypted = 0x1;\n        tenc.default_IV_size = 8;\n        tenc.default_KID = (contentProtection && (contentProtection.length) > 0 && contentProtection[0]['cenc:default_KID']) ?\n            contentProtection[0]['cenc:default_KID'] : [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n    }\n\n    function createTrexBox(moov) {\n\n        let trex = ISOBoxer.createFullBox('trex', moov);\n\n        trex.track_ID = trackId;\n        trex.default_sample_description_index = 1;\n        trex.default_sample_duration = 0;\n        trex.default_sample_size = 0;\n        trex.default_sample_flags = 0;\n\n        return trex;\n    }\n\n    function hexStringtoBuffer(str) {\n        let buf = new Uint8Array(str.length / 2);\n        let i;\n\n        for (i = 0; i < str.length / 2; i += 1) {\n            buf[i] = parseInt('' + str[i * 2] + str[i * 2 + 1], 16);\n        }\n        return buf;\n    }\n\n    function stringToCharCode(str) {\n        let code = 0;\n        let i;\n\n        for (i = 0; i < str.length; i += 1) {\n            code |= str.charCodeAt(i) << ((str.length - i - 1) * 8);\n        }\n        return code;\n    }\n\n    function generateMoov(rep) {\n        if (!rep || !rep.adaptation) {\n            return;\n        }\n\n        let isoFile,\n            arrayBuffer;\n\n        representation = rep;\n        adaptationSet = representation.adaptation;\n\n        period = adaptationSet.period;\n        trackId = adaptationSet.index + 1;\n        contentProtection = period.mpd.manifest.Period_asArray[period.index].AdaptationSet_asArray[adaptationSet.index].ContentProtection;\n\n        timescale = period.mpd.manifest.Period_asArray[period.index].AdaptationSet_asArray[adaptationSet.index].SegmentTemplate.timescale;\n\n        isoFile = ISOBoxer.createFile();\n        createFtypBox(isoFile);\n        createMoovBox(isoFile);\n\n        arrayBuffer = isoFile.write();\n\n        return arrayBuffer;\n    }\n\n    instance = {\n        generateMoov: generateMoov\n    };\n\n    return instance;\n}\n\nMssFragmentMoovProcessor.__dashjs_factory_name = 'MssFragmentMoovProcessor';\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentMoovProcessor); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MSSFragmentMoofProcessor from './MssFragmentMoofProcessor';\nimport MSSFragmentMoovProcessor from './MssFragmentMoovProcessor';\nimport MssEvents from './MssEvents';\n\n\n// Add specific box processors not provided by codem-isoboxer library\n\nfunction arrayEqual(arr1, arr2) {\n    return (arr1.length === arr2.length) && arr1.every(function (element, index) {\n        return element === arr2[index];\n    });\n}\n\nfunction saioProcessor() {\n    this._procFullBox();\n    if (this.flags & 1) {\n        this._procField('aux_info_type', 'uint', 32);\n        this._procField('aux_info_type_parameter', 'uint', 32);\n    }\n    this._procField('entry_count', 'uint', 32);\n    this._procFieldArray('offset', this.entry_count, 'uint', (this.version === 1) ? 64 : 32);\n}\n\nfunction saizProcessor() {\n    this._procFullBox();\n    if (this.flags & 1) {\n        this._procField('aux_info_type', 'uint', 32);\n        this._procField('aux_info_type_parameter', 'uint', 32);\n    }\n    this._procField('default_sample_info_size', 'uint', 8);\n    this._procField('sample_count', 'uint', 32);\n    if (this.default_sample_info_size === 0) {\n        this._procFieldArray('sample_info_size', this.sample_count, 'uint', 8);\n    }\n}\n\nfunction sencProcessor() {\n    this._procFullBox();\n    this._procField('sample_count', 'uint', 32);\n    if (this.flags & 1) {\n        this._procField('IV_size', 'uint', 8);\n    }\n    this._procEntries('entry', this.sample_count, function (entry) {\n        this._procEntryField(entry, 'InitializationVector', 'data', 8);\n        if (this.flags & 2) {\n            this._procEntryField(entry, 'NumberOfEntries', 'uint', 16);\n            this._procSubEntries(entry, 'clearAndCryptedData', entry.NumberOfEntries, function (clearAndCryptedData) {\n                this._procEntryField(clearAndCryptedData, 'BytesOfClearData', 'uint', 16);\n                this._procEntryField(clearAndCryptedData, 'BytesOfEncryptedData', 'uint', 32);\n            });\n        }\n    });\n}\n\nfunction uuidProcessor() {\n    let tfxdUserType = [0x6D, 0x1D, 0x9B, 0x05, 0x42, 0xD5, 0x44, 0xE6, 0x80, 0xE2, 0x14, 0x1D, 0xAF, 0xF7, 0x57, 0xB2];\n    let tfrfUserType = [0xD4, 0x80, 0x7E, 0xF2, 0xCA, 0x39, 0x46, 0x95, 0x8E, 0x54, 0x26, 0xCB, 0x9E, 0x46, 0xA7, 0x9F];\n    let sepiffUserType = [0xA2, 0x39, 0x4F, 0x52, 0x5A, 0x9B, 0x4f, 0x14, 0xA2, 0x44, 0x6C, 0x42, 0x7C, 0x64, 0x8D, 0xF4];\n\n    if (arrayEqual(this.usertype, tfxdUserType)) {\n        this._procFullBox();\n        if (this._parsing) {\n            this.type = 'tfxd';\n        }\n        this._procField('fragment_absolute_time', 'uint', (this.version === 1) ? 64 : 32);\n        this._procField('fragment_duration', 'uint', (this.version === 1) ? 64 : 32);\n    }\n\n    if (arrayEqual(this.usertype, tfrfUserType)) {\n        this._procFullBox();\n        if (this._parsing) {\n            this.type = 'tfrf';\n        }\n        this._procField('fragment_count', 'uint', 8);\n        this._procEntries('entry', this.fragment_count, function (entry) {\n            this._procEntryField(entry, 'fragment_absolute_time', 'uint', (this.version === 1) ? 64 : 32);\n            this._procEntryField(entry, 'fragment_duration', 'uint', (this.version === 1) ? 64 : 32);\n        });\n    }\n\n    if (arrayEqual(this.usertype, sepiffUserType)) {\n        if (this._parsing) {\n            this.type = 'sepiff';\n        }\n        sencProcessor.call(this);\n    }\n}\n\nfunction MssFragmentProcessor(config) {\n\n    config = config || {};\n    let context = this.context;\n    let metricsModel = config.metricsModel;\n    let playbackController = config.playbackController;\n    let eventBus = config.eventBus;\n    let protectionController = config.protectionController;\n    const ISOBoxer = config.ISOBoxer;\n    const log = config.log;\n    let instance;\n\n    function setup() {\n        ISOBoxer.addBoxProcessor('uuid', uuidProcessor);\n        ISOBoxer.addBoxProcessor('saio', saioProcessor);\n        ISOBoxer.addBoxProcessor('saiz', saizProcessor);\n        ISOBoxer.addBoxProcessor('senc', sencProcessor);\n    }\n\n    function generateMoov(rep) {\n        let mssFragmentMoovProcessor = MSSFragmentMoovProcessor(context).create({protectionController: protectionController, constants: config.constants, ISOBoxer: config.ISOBoxer});\n        return mssFragmentMoovProcessor.generateMoov(rep);\n    }\n\n    function processFragment(e, sp) {\n        if (!e || !e.request || !e.response) {\n            throw new Error('e parameter is missing or malformed');\n        }\n\n        let request = e.request;\n\n        if (request.type === 'MediaSegment') {\n\n            // it's a MediaSegment, let's convert fragment\n            let mssFragmentMoofProcessor = MSSFragmentMoofProcessor(context).create({\n                metricsModel: metricsModel,\n                playbackController: playbackController,\n                ISOBoxer: ISOBoxer,\n                log: log,\n                errHandler: config.errHandler\n            });\n            mssFragmentMoofProcessor.convertFragment(e, sp);\n\n        } else if (request.type === 'FragmentInfoSegment') {\n\n            // it's a FragmentInfo, ask relative fragment info controller to handle it\n            eventBus.trigger(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, {\n                fragmentInfo: e,\n                streamProcessor: sp\n            });\n\n            // Change the sender value to stop event to be propagated (fragment info must not be added to buffer)\n            e.sender = null;\n        }\n    }\n\n    instance = {\n        generateMoov: generateMoov,\n        processFragment: processFragment\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssFragmentProcessor.__dashjs_factory_name = 'MssFragmentProcessor';\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentProcessor); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DataChunk from '../streaming/vo/DataChunk';\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\nimport MssFragmentInfoController from './MssFragmentInfoController';\nimport MssFragmentProcessor from './MssFragmentProcessor';\nimport MssParser from './parser/MssParser';\n\nfunction MssHandler(config) {\n\n    config = config || {};\n    let context = this.context;\n    let eventBus = config.eventBus;\n    const events = config.events;\n    const constants = config.constants;\n    const initSegmentType = config.initSegmentType;\n    let metricsModel = config.metricsModel;\n    let playbackController = config.playbackController;\n    let protectionController = config.protectionController;\n    let mssFragmentProcessor = MssFragmentProcessor(context).create({\n        metricsModel: metricsModel,\n        playbackController: playbackController,\n        protectionController: protectionController,\n        eventBus: eventBus,\n        constants: constants,\n        ISOBoxer: config.ISOBoxer,\n        log: config.log,\n        errHandler: config.errHandler\n    });\n    let mssParser;\n\n    let instance;\n\n    function setup() {}\n\n    function onInitializationRequested(e) {\n        let streamProcessor = e.sender.getStreamProcessor();\n        let request = new FragmentRequest();\n        let representationController = streamProcessor.getRepresentationController();\n        let representation = representationController.getCurrentRepresentation();\n        let period,\n            presentationStartTime;\n\n        period = representation.adaptation.period;\n\n        request.mediaType = representation.adaptation.type;\n        request.type = initSegmentType;\n        request.range = representation.range;\n        presentationStartTime = period.start;\n        //request.availabilityStartTime = timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, representation.adaptation.period.mpd, isDynamic);\n        //request.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationStartTime + period.duration, period.mpd, isDynamic);\n        request.quality = representation.index;\n        request.mediaInfo = streamProcessor.getMediaInfo();\n        request.representationId = representation.id;\n\n        const chunk = createDataChunk(request, streamProcessor.getStreamInfo().id, e.type !== events.FRAGMENT_LOADING_PROGRESS);\n\n        // Generate initialization segment (moov)\n        chunk.bytes = mssFragmentProcessor.generateMoov(representation);\n\n        eventBus.trigger(events.INIT_FRAGMENT_LOADED, {\n            chunk: chunk,\n            fragmentModel: streamProcessor.getFragmentModel()\n        });\n\n        // Change the sender value to stop event to be propagated\n        e.sender = null;\n    }\n\n    function createDataChunk(request, streamId, endFragment) {\n        const chunk = new DataChunk();\n\n        chunk.streamId = streamId;\n        chunk.mediaInfo = request.mediaInfo;\n        chunk.segmentType = request.type;\n        chunk.start = request.startTime;\n        chunk.duration = request.duration;\n        chunk.end = chunk.start + chunk.duration;\n        chunk.index = request.index;\n        chunk.quality = request.quality;\n        chunk.representationId = request.representationId;\n        chunk.endFragment = endFragment;\n\n        return chunk;\n    }\n\n    function onSegmentMediaLoaded(e) {\n        if (e.error) {\n            return;\n        }\n        // Process moof to transcode it from MSS to DASH\n        let streamProcessor = e.sender.getStreamProcessor();\n        mssFragmentProcessor.processFragment(e, streamProcessor);\n    }\n\n    function onPlaybackSeekAsked() {\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\n\n            //create fragment info controllers for each stream processors of active stream (only for audio, video or fragmentedText)\n            let streamController = playbackController.getStreamController();\n            if (streamController) {\n                let processors = streamController.getActiveStreamProcessors();\n                processors.forEach(function (processor) {\n                    if (processor.getType() === constants.VIDEO ||\n                        processor.getType() === constants.AUDIO ||\n                        processor.getType() === constants.FRAGMENTED_TEXT) {\n\n                        // check that there is no fragment info controller registered to processor\n                        let i;\n                        let alreadyRegistered = false;\n                        let externalControllers = processor.getExternalControllers();\n                        for (i = 0; i < externalControllers.length; i++) {\n                            if (externalControllers[i].controllerType &&\n                                externalControllers[i].controllerType === 'MssFragmentInfoController') {\n                                alreadyRegistered = true;\n                            }\n                        }\n\n                        if (!alreadyRegistered) {\n                            let fragmentInfoController = MssFragmentInfoController(context).create({\n                                streamProcessor: processor,\n                                eventBus: eventBus,\n                                metricsModel: metricsModel,\n                                playbackController: playbackController,\n                                ISOBoxer: config.ISOBoxer,\n                                log: config.log\n                            });\n                            fragmentInfoController.initialize();\n                            fragmentInfoController.start();\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    function onTTMLPreProcess(ttmlSubtitles) {\n        if (!ttmlSubtitles || !ttmlSubtitles.data) {\n            return;\n        }\n\n        while (ttmlSubtitles.data.indexOf('http://www.w3.org/2006/10/ttaf1') !== -1) {\n            ttmlSubtitles.data = ttmlSubtitles.data.replace('http://www.w3.org/2006/10/ttaf1', 'http://www.w3.org/ns/ttml');\n        }\n    }\n\n    function registerEvents() {\n        eventBus.on(events.INIT_REQUESTED, onInitializationRequested, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.TTML_TO_PARSE, onTTMLPreProcess, instance);\n    }\n\n    function reset() {\n        eventBus.off(events.INIT_REQUESTED, onInitializationRequested, this);\n        eventBus.off(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, this);\n        eventBus.off(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, this);\n        eventBus.off(events.TTML_TO_PARSE, onTTMLPreProcess, this);\n    }\n\n    function createMssParser() {\n        mssParser = MssParser(context).create(config);\n        return mssParser;\n    }\n\n    instance = {\n        reset: reset,\n        createMssParser: createMssParser,\n        registerEvents: registerEvents\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssHandler.__dashjs_factory_name = 'MssHandler';\nexport default dashjs.FactoryMaker.getClassFactory(MssHandler); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MssHandler from './MssHandler';\n\n// Shove both of these into the global scope\nvar context = (typeof window !== 'undefined' && window) || global;\n\nvar dashjs = context.dashjs;\nif (!dashjs) {\n    dashjs = context.dashjs = {};\n}\n\ndashjs.MssHandler = MssHandler;\n\nexport default dashjs;\nexport { MssHandler };\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @module MssParser\n * @param {Object} config object\n */\nfunction MssParser(config) {\n    config = config || {};\n    const BASE64 = config.BASE64;\n    const log = config.log;\n    const constants = config.constants;\n\n    const DEFAULT_TIME_SCALE = 10000000.0;\n    const SUPPORTED_CODECS = ['AAC', 'AACL', 'AVC1', 'H264', 'TTML', 'DFXP'];\n    // MPEG-DASH Role and accessibility mapping according to ETSI TS 103 285 v1.1.1 (section 7.1.2)\n    const ROLE = {\n        'SUBT': 'alternate',\n        'CAPT': 'alternate', // 'CAPT' is commonly equivalent to 'SUBT'\n        'DESC': 'main'\n    };\n    const ACCESSIBILITY = {\n        'DESC': '2'\n    };\n    const samplingFrequencyIndex = {\n        96000: 0x0,\n        88200: 0x1,\n        64000: 0x2,\n        48000: 0x3,\n        44100: 0x4,\n        32000: 0x5,\n        24000: 0x6,\n        22050: 0x7,\n        16000: 0x8,\n        12000: 0x9,\n        11025: 0xA,\n        8000: 0xB,\n        7350: 0xC\n    };\n    const mimeTypeMap = {\n        'video': 'video/mp4',\n        'audio': 'audio/mp4',\n        'text': 'application/mp4'\n    };\n\n    let instance,\n        mediaPlayerModel;\n\n\n    function setup() {\n        mediaPlayerModel = config.mediaPlayerModel;\n    }\n\n    function mapPeriod(smoothStreamingMedia, timescale) {\n        let period = {};\n        let streams,\n            adaptation;\n\n        // For each StreamIndex node, create an AdaptationSet element\n        period.AdaptationSet_asArray = [];\n        streams = smoothStreamingMedia.getElementsByTagName('StreamIndex');\n        for (let i = 0; i < streams.length; i++) {\n            adaptation = mapAdaptationSet(streams[i], timescale);\n            if (adaptation !== null) {\n                period.AdaptationSet_asArray.push(adaptation);\n            }\n        }\n\n        if (period.AdaptationSet_asArray.length > 0) {\n            period.AdaptationSet = (period.AdaptationSet_asArray.length > 1) ? period.AdaptationSet_asArray : period.AdaptationSet_asArray[0];\n        }\n\n        return period;\n    }\n\n    function mapAdaptationSet(streamIndex, timescale) {\n\n        let adaptationSet = {};\n        let representations = [];\n        let segmentTemplate = {};\n        let qualityLevels,\n            representation,\n            segments,\n            i;\n\n        adaptationSet.id = streamIndex.getAttribute('Name') ? streamIndex.getAttribute('Name') : streamIndex.getAttribute('Type');\n        adaptationSet.contentType = streamIndex.getAttribute('Type');\n        adaptationSet.lang = streamIndex.getAttribute('Language') || 'und';\n        adaptationSet.mimeType = mimeTypeMap[adaptationSet.contentType];\n        adaptationSet.subType = streamIndex.getAttribute('Subtype');\n        adaptationSet.maxWidth = streamIndex.getAttribute('MaxWidth');\n        adaptationSet.maxHeight = streamIndex.getAttribute('MaxHeight');\n\n        // Map subTypes to MPEG-DASH AdaptationSet role and accessibility (see ETSI TS 103 285 v1.1.1, section 7.1.2)\n        if (adaptationSet.subType) {\n            if (ROLE[adaptationSet.subType]) {\n                let role = {\n                    schemeIdUri: 'urn:mpeg:dash:role:2011',\n                    value: ROLE[adaptationSet.subType]\n                };\n                adaptationSet.Role = role;\n                adaptationSet.Role_asArray = [role];\n            }\n            if (ACCESSIBILITY[adaptationSet.subType]) {\n                let accessibility = {\n                    schemeIdUri: 'urn:tva:metadata:cs:AudioPurposeCS:2007',\n                    value: ACCESSIBILITY[adaptationSet.subType]\n                };\n                adaptationSet.Accessibility = accessibility;\n                adaptationSet.Accessibility_asArray = [accessibility];\n            }\n        }\n\n        // Create a SegmentTemplate with a SegmentTimeline\n        segmentTemplate = mapSegmentTemplate(streamIndex, timescale);\n\n        qualityLevels = streamIndex.getElementsByTagName('QualityLevel');\n        // For each QualityLevel node, create a Representation element\n        for (i = 0; i < qualityLevels.length; i++) {\n            // Propagate BaseURL and mimeType\n            qualityLevels[i].BaseURL = adaptationSet.BaseURL;\n            qualityLevels[i].mimeType = adaptationSet.mimeType;\n\n            // Set quality level id\n            qualityLevels[i].Id = adaptationSet.id + '_' + qualityLevels[i].getAttribute('Index');\n\n            // Map Representation to QualityLevel\n            representation = mapRepresentation(qualityLevels[i], streamIndex);\n\n            if (representation !== null) {\n                // Copy SegmentTemplate into Representation\n                representation.SegmentTemplate = segmentTemplate;\n\n                representations.push(representation);\n            }\n        }\n\n        if (representations.length === 0) {\n            return null;\n        }\n\n        adaptationSet.Representation = (representations.length > 1) ? representations : representations[0];\n        adaptationSet.Representation_asArray = representations;\n\n        // Set SegmentTemplate\n        adaptationSet.SegmentTemplate = segmentTemplate;\n\n        segments = segmentTemplate.SegmentTimeline.S_asArray;\n\n        return adaptationSet;\n    }\n\n    function mapRepresentation(qualityLevel, streamIndex) {\n\n        let representation = {};\n        let fourCCValue = null;\n        let type = streamIndex.getAttribute('Type');\n\n        representation.id = qualityLevel.Id;\n        representation.bandwidth = parseInt(qualityLevel.getAttribute('Bitrate'), 10);\n        representation.mimeType = qualityLevel.mimeType;\n        representation.width = parseInt(qualityLevel.getAttribute('MaxWidth'), 10);\n        representation.height = parseInt(qualityLevel.getAttribute('MaxHeight'), 10);\n\n        fourCCValue = qualityLevel.getAttribute('FourCC');\n\n        // If FourCC not defined at QualityLevel level, then get it from StreamIndex level\n        if (fourCCValue === null || fourCCValue === '') {\n            fourCCValue = streamIndex.getAttribute('FourCC');\n        }\n\n        // If still not defined (optionnal for audio stream, see https://msdn.microsoft.com/en-us/library/ff728116%28v=vs.95%29.aspx),\n        // then we consider the stream is an audio AAC stream\n        if (fourCCValue === null || fourCCValue === '') {\n            if (type === 'audio') {\n                fourCCValue = 'AAC';\n            } else if (type === 'video') {\n                log('[MssParser] FourCC is not defined whereas it is required for a QualityLevel element for a StreamIndex of type \"video\"');\n                return null;\n            }\n        }\n\n        // Check if codec is supported\n        if (SUPPORTED_CODECS.indexOf(fourCCValue.toUpperCase()) === -1) {\n            // Do not send warning\n            //this.errHandler.sendWarning(MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CODEC_UNSUPPORTED, 'Codec not supported', {codec: fourCCValue});\n            log('[MssParser] Codec not supported: ' + fourCCValue);\n            return null;\n        }\n\n        // Get codecs value according to FourCC field\n        if (fourCCValue === 'H264' || fourCCValue === 'AVC1') {\n            representation.codecs = getH264Codec(qualityLevel);\n        } else if (fourCCValue.indexOf('AAC') >= 0) {\n            representation.codecs = getAACCodec(qualityLevel, fourCCValue);\n            representation.audioSamplingRate = parseInt(qualityLevel.getAttribute('SamplingRate'), 10);\n            representation.audioChannels = parseInt(qualityLevel.getAttribute('Channels'), 10);\n        } else if (fourCCValue.indexOf('TTML') || fourCCValue.indexOf('DFXP')) {\n            representation.codecs = constants.STPP;\n        }\n\n        representation.codecPrivateData = '' + qualityLevel.getAttribute('CodecPrivateData');\n        representation.BaseURL = qualityLevel.BaseURL;\n\n        return representation;\n    }\n\n    function getH264Codec(qualityLevel) {\n        let codecPrivateData = qualityLevel.getAttribute('CodecPrivateData').toString();\n        let nalHeader,\n            avcoti;\n\n\n        // Extract from the CodecPrivateData field the hexadecimal representation of the following\n        // three bytes in the sequence parameter set NAL unit.\n        // => Find the SPS nal header\n        nalHeader = /00000001[0-9]7/.exec(codecPrivateData);\n        // => Find the 6 characters after the SPS nalHeader (if it exists)\n        avcoti = nalHeader && nalHeader[0] ? (codecPrivateData.substr(codecPrivateData.indexOf(nalHeader[0]) + 10, 6)) : undefined;\n\n        return 'avc1.' + avcoti;\n    }\n\n    function getAACCodec(qualityLevel, fourCCValue) {\n        let objectType = 0;\n        let codecPrivateData = qualityLevel.getAttribute('CodecPrivateData').toString();\n        let samplingRate = parseInt(qualityLevel.getAttribute('SamplingRate'), 10);\n        let codecPrivateDataHex,\n            arr16,\n            indexFreq,\n            extensionSamplingFrequencyIndex;\n\n        //chrome problem, in implicit AAC HE definition, so when AACH is detected in FourCC\n        //set objectType to 5 => strange, it should be 2\n        if (fourCCValue === 'AACH') {\n            objectType = 0x05;\n        }\n        //if codecPrivateData is empty, build it :\n        if (codecPrivateData === undefined || codecPrivateData === '') {\n            objectType = 0x02; //AAC Main Low Complexity => object Type = 2\n            indexFreq = samplingFrequencyIndex[samplingRate];\n            if (fourCCValue === 'AACH') {\n                // 4 bytes :     XXXXX         XXXX          XXXX             XXXX                  XXXXX      XXX   XXXXXXX\n                //           ' ObjectType' 'Freq Index' 'Channels value'   'Extens Sampl Freq'  'ObjectType'  'GAS' 'alignment = 0'\n                objectType = 0x05; // High Efficiency AAC Profile = object Type = 5 SBR\n                codecPrivateData = new Uint8Array(4);\n                extensionSamplingFrequencyIndex = samplingFrequencyIndex[samplingRate * 2]; // in HE AAC Extension Sampling frequence\n                // equals to SamplingRate*2\n                //Freq Index is present for 3 bits in the first byte, last bit is in the second\n                codecPrivateData[0] = (objectType << 3) | (indexFreq >> 1);\n                codecPrivateData[1] = (indexFreq << 7) | (qualityLevel.Channels << 3) | (extensionSamplingFrequencyIndex >> 1);\n                codecPrivateData[2] = (extensionSamplingFrequencyIndex << 7) | (0x02 << 2); // origin object type equals to 2 => AAC Main Low Complexity\n                codecPrivateData[3] = 0x0; //alignment bits\n\n                arr16 = new Uint16Array(2);\n                arr16[0] = (codecPrivateData[0] << 8) + codecPrivateData[1];\n                arr16[1] = (codecPrivateData[2] << 8) + codecPrivateData[3];\n                //convert decimal to hex value\n                codecPrivateDataHex = arr16[0].toString(16);\n                codecPrivateDataHex = arr16[0].toString(16) + arr16[1].toString(16);\n\n            } else {\n                // 2 bytes :     XXXXX         XXXX          XXXX              XXX\n                //           ' ObjectType' 'Freq Index' 'Channels value'   'GAS = 000'\n                codecPrivateData = new Uint8Array(2);\n                //Freq Index is present for 3 bits in the first byte, last bit is in the second\n                codecPrivateData[0] = (objectType << 3) | (indexFreq >> 1);\n                codecPrivateData[1] = (indexFreq << 7) | (parseInt(qualityLevel.getAttribute('Channels'), 10) << 3);\n                // put the 2 bytes in an 16 bits array\n                arr16 = new Uint16Array(1);\n                arr16[0] = (codecPrivateData[0] << 8) + codecPrivateData[1];\n                //convert decimal to hex value\n                codecPrivateDataHex = arr16[0].toString(16);\n            }\n\n            codecPrivateData = '' + codecPrivateDataHex;\n            codecPrivateData = codecPrivateData.toUpperCase();\n            qualityLevel.setAttribute('CodecPrivateData', codecPrivateData);\n        } else if (objectType === 0) {\n            objectType = (parseInt(codecPrivateData.substr(0, 2), 16) & 0xF8) >> 3;\n        }\n\n        return 'mp4a.40.' + objectType;\n    }\n\n    function mapSegmentTemplate(streamIndex, timescale) {\n\n        let segmentTemplate = {};\n        let mediaUrl,\n            streamIndexTimeScale;\n\n        mediaUrl = streamIndex.getAttribute('Url').replace('{bitrate}', '$Bandwidth$');\n        mediaUrl = mediaUrl.replace('{start time}', '$Time$');\n\n        streamIndexTimeScale = streamIndex.getAttribute('TimeScale');\n        streamIndexTimeScale = streamIndexTimeScale ? parseFloat(streamIndexTimeScale) : timescale;\n\n        segmentTemplate.media = mediaUrl;\n        segmentTemplate.timescale = streamIndexTimeScale;\n\n        segmentTemplate.SegmentTimeline = mapSegmentTimeline(streamIndex, segmentTemplate.timescale);\n\n        return segmentTemplate;\n    }\n\n    function mapSegmentTimeline(streamIndex, timescale) {\n\n        let segmentTimeline = {};\n        let chunks = streamIndex.getElementsByTagName('c');\n        let segments = [];\n        let segment;\n        let prevSegment;\n        let tManifest;\n        let i,j,r;\n        let duration = 0;\n\n        for (i = 0; i < chunks.length; i++) {\n            segment = {};\n\n            // Get time 't' attribute value\n            tManifest = chunks[i].getAttribute('t');\n\n            // => segment.tManifest = original timestamp value as a string (for constructing the fragment request url, see DashHandler)\n            // => segment.t = number value of timestamp (maybe rounded value, but only for 0.1 microsecond)\n            segment.tManifest = parseFloat(tManifest);\n            segment.t = parseFloat(tManifest);\n\n            // Get duration 'd' attribute value\n            segment.d = parseFloat(chunks[i].getAttribute('d'));\n\n            // If 't' not defined for first segment then t=0\n            if ((i === 0) && !segment.t) {\n                segment.t = 0;\n            }\n\n            if (i > 0) {\n                prevSegment = segments[segments.length - 1];\n                // Update previous segment duration if not defined\n                if (!prevSegment.d) {\n                    if (prevSegment.tManifest) {\n                        prevSegment.d = parseFloat(tManifest) - parseFloat(prevSegment.tManifest);\n                    } else {\n                        prevSegment.d = segment.t - prevSegment.t;\n                    }\n                }\n                // Set segment absolute timestamp if not set in manifest\n                if (!segment.t) {\n                    if (prevSegment.tManifest) {\n                        segment.tManifest = parseFloat(prevSegment.tManifest) + prevSegment.d;\n                        segment.t = parseFloat(segment.tManifest);\n                    } else {\n                        segment.t = prevSegment.t + prevSegment.d;\n                    }\n                }\n            }\n\n            duration += segment.d;\n\n            // Create new segment\n            segments.push(segment);\n\n            // Support for 'r' attribute (i.e. \"repeat\" as in MPEG-DASH)\n            r = parseFloat(chunks[i].getAttribute('r'));\n            if (r) {\n\n                for (j = 0; j < (r - 1); j++) {\n                    prevSegment = segments[segments.length - 1];\n                    segment = {};\n                    segment.t = prevSegment.t + prevSegment.d;\n                    segment.d = prevSegment.d;\n                    if (prevSegment.tManifest) {\n                        segment.tManifest  = parseFloat(prevSegment.tManifest) + prevSegment.d;\n                    }\n                    duration += segment.d;\n                    segments.push(segment);\n                }\n            }\n        }\n\n        segmentTimeline.S = segments;\n        segmentTimeline.S_asArray = segments;\n        segmentTimeline.duration = duration / timescale;\n\n        return segmentTimeline;\n    }\n\n    function getKIDFromProtectionHeader(protectionHeader) {\n        let prHeader,\n            wrmHeader,\n            xmlReader,\n            KID;\n\n        // Get PlayReady header as byte array (base64 decoded)\n        prHeader = BASE64.decodeArray(protectionHeader.firstChild.data);\n\n        // Get Right Management header (WRMHEADER) from PlayReady header\n        wrmHeader = getWRMHeaderFromPRHeader(prHeader);\n\n        // Convert from multi-byte to unicode\n        wrmHeader = new Uint16Array(wrmHeader.buffer);\n\n        // Convert to string\n        wrmHeader = String.fromCharCode.apply(null, wrmHeader);\n\n        // Parse <WRMHeader> to get KID field value\n        xmlReader = (new DOMParser()).parseFromString(wrmHeader, 'application/xml');\n        KID = xmlReader.querySelector('KID').textContent;\n\n        // Get KID (base64 decoded) as byte array\n        KID = BASE64.decodeArray(KID);\n\n        // Convert UUID from little-endian to big-endian\n        convertUuidEndianness(KID);\n\n        return KID;\n    }\n\n    function getWRMHeaderFromPRHeader(prHeader) {\n        let length,\n            recordCount,\n            recordType,\n            recordLength,\n            recordValue;\n        let i = 0;\n\n        // Parse PlayReady header\n\n        // Length - 32 bits (LE format)\n        length = (prHeader[i + 3] << 24) + (prHeader[i + 2] << 16) + (prHeader[i + 1] << 8) + prHeader[i];\n        i += 4;\n\n        // Record count - 16 bits (LE format)\n        recordCount = (prHeader[i + 1] << 8) + prHeader[i];\n        i += 2;\n\n        // Parse records\n        while (i < prHeader.length) {\n            // Record type - 16 bits (LE format)\n            recordType = (prHeader[i + 1] << 8) + prHeader[i];\n            i += 2;\n\n            // Check if Rights Management header (record type = 0x01)\n            if (recordType === 0x01) {\n\n                // Record length - 16 bits (LE format)\n                recordLength = (prHeader[i + 1] << 8) + prHeader[i];\n                i += 2;\n\n                // Record value => contains <WRMHEADER>\n                recordValue = new Uint8Array(recordLength);\n                recordValue.set(prHeader.subarray(i, i + recordLength));\n                return recordValue;\n            }\n        }\n\n        return null;\n    }\n\n    function convertUuidEndianness(uuid) {\n        swapBytes(uuid, 0, 3);\n        swapBytes(uuid, 1, 2);\n        swapBytes(uuid, 4, 5);\n        swapBytes(uuid, 6, 7);\n    }\n\n    function swapBytes(bytes, pos1, pos2) {\n        let temp = bytes[pos1];\n        bytes[pos1] = bytes[pos2];\n        bytes[pos2] = temp;\n    }\n\n\n    function createPRContentProtection(protectionHeader) {\n        let pro = {\n            __text: protectionHeader.firstChild.data,\n            __prefix: 'mspr'\n        };\n        return {\n            schemeIdUri: 'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95',\n            value: 'com.microsoft.playready',\n            pro: pro,\n            pro_asArray: pro\n        };\n    }\n\n    function createWidevineContentProtection(protectionHeader, KID) {\n        // Create Widevine CENC header (Protocol Buffer) with KID value\n        let wvCencHeader = new Uint8Array(2 + KID.length);\n        wvCencHeader[0] = 0x12;\n        wvCencHeader[1] = 0x10;\n        wvCencHeader.set(KID, 2);\n\n        // Create a pssh box\n        let length = 12 /* box length, type, version and flags */ + 16 /* SystemID */ + 4 /* data length */ + wvCencHeader.length;\n        let pssh = new Uint8Array(length);\n        let i = 0;\n\n        // Set box length value\n        pssh[i++] = (length & 0xFF000000) >> 24;\n        pssh[i++] = (length & 0x00FF0000) >> 16;\n        pssh[i++] = (length & 0x0000FF00) >> 8;\n        pssh[i++] = (length & 0x000000FF);\n\n        // Set type ('pssh'), version (0) and flags (0)\n        pssh.set([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00], i);\n        i += 8;\n\n        // Set SystemID ('edef8ba9-79d6-4ace-a3c8-27dcd51d21ed')\n        pssh.set([0xed, 0xef, 0x8b, 0xa9,  0x79, 0xd6, 0x4a, 0xce, 0xa3, 0xc8, 0x27, 0xdc, 0xd5, 0x1d, 0x21, 0xed], i);\n        i += 16;\n\n        // Set data length value\n        pssh[i++] = (wvCencHeader.length & 0xFF000000) >> 24;\n        pssh[i++] = (wvCencHeader.length & 0x00FF0000) >> 16;\n        pssh[i++] = (wvCencHeader.length & 0x0000FF00) >> 8;\n        pssh[i++] = (wvCencHeader.length & 0x000000FF);\n\n        // Copy Widevine CENC header\n        pssh.set(wvCencHeader, i);\n\n        // Convert to BASE64 string\n        pssh = String.fromCharCode.apply(null, pssh);\n        pssh = BASE64.encodeASCII(pssh);\n\n        return {\n            schemeIdUri: 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed',\n            value: 'com.widevine.alpha',\n            pssh: {\n                __text: pssh\n            }\n        };\n    }\n\n    function processManifest(xmlDoc, manifestLoadedTime) {\n        let manifest = {};\n        let contentProtections = [];\n        let smoothStreamingMedia = xmlDoc.getElementsByTagName('SmoothStreamingMedia')[0];\n        let protection = xmlDoc.getElementsByTagName('Protection')[0];\n        let protectionHeader = null;\n        let period,\n            adaptations,\n            contentProtection,\n            KID,\n            timestampOffset,\n            startTime,\n            segments,\n            timescale,\n            i, j;\n\n        // Set manifest node properties\n        manifest.protocol = 'MSS';\n        manifest.profiles = 'urn:mpeg:dash:profile:isoff-live:2011';\n        manifest.type = smoothStreamingMedia.getAttribute('IsLive') === 'TRUE' ? 'dynamic' : 'static';\n        timescale =  smoothStreamingMedia.getAttribute('TimeScale');\n        manifest.timescale = timescale ? parseFloat(timescale) : DEFAULT_TIME_SCALE;\n        manifest.timeShiftBufferDepth = parseFloat(smoothStreamingMedia.getAttribute('DVRWindowLength')) / manifest.timescale;\n        manifest.mediaPresentationDuration = (parseFloat(smoothStreamingMedia.getAttribute('Duration')) === 0) ? Infinity : parseFloat(smoothStreamingMedia.getAttribute('Duration')) / manifest.timescale;\n        manifest.minBufferTime = mediaPlayerModel.getStableBufferTime();\n        manifest.ttmlTimeIsRelative = true;\n\n        // In case of live streams, set availabilityStartTime property according to DVRWindowLength\n        if (manifest.type === 'dynamic') {\n            manifest.availabilityStartTime = new Date(manifestLoadedTime.getTime() - (manifest.timeShiftBufferDepth * 1000));\n            manifest.refreshManifestOnSwitchTrack = true;\n            manifest.doNotUpdateDVRWindowOnBufferUpdated = true; // done by Mss fragment processor\n            manifest.ignorePostponeTimePeriod = true; // in Mss, manifest is never updated\n        }\n\n        // Map period node to manifest root node\n        manifest.Period = mapPeriod(smoothStreamingMedia, manifest.timescale);\n        manifest.Period_asArray = [manifest.Period];\n\n        // Initialize period start time\n        period = manifest.Period;\n        period.start = 0;\n\n        // ContentProtection node\n        if (protection !== undefined) {\n            protectionHeader = xmlDoc.getElementsByTagName('ProtectionHeader')[0];\n\n            // Some packagers put newlines into the ProtectionHeader base64 string, which is not good\n            // because this cannot be correctly parsed. Let's just filter out any newlines found in there.\n            protectionHeader.firstChild.data = protectionHeader.firstChild.data.replace(/\\n|\\r/g, '');\n\n            // Get KID (in CENC format) from protection header\n            KID = getKIDFromProtectionHeader(protectionHeader);\n\n            // Create ContentProtection for PlayReady\n            contentProtection = createPRContentProtection(protectionHeader);\n            contentProtection['cenc:default_KID'] = KID;\n            contentProtections.push(contentProtection);\n\n            // Create ContentProtection for Widevine (as a CENC protection)\n            contentProtection = createWidevineContentProtection(protectionHeader, KID);\n            contentProtection['cenc:default_KID'] = KID;\n            contentProtections.push(contentProtection);\n\n            manifest.ContentProtection = contentProtections;\n            manifest.ContentProtection_asArray = contentProtections;\n        }\n\n        adaptations = period.AdaptationSet_asArray;\n\n        for (i = 0; i < adaptations.length; i += 1) {\n            adaptations[i].SegmentTemplate.initialization = '$Bandwidth$';\n            // Propagate content protection information into each adaptation\n            if (manifest.ContentProtection !== undefined) {\n                adaptations[i].ContentProtection = manifest.ContentProtection;\n                adaptations[i].ContentProtection_asArray = manifest.ContentProtection_asArray;\n            }\n\n            if (manifest.type === 'dynamic') {\n                // Match timeShiftBufferDepth to video segment timeline duration\n                if (manifest.timeShiftBufferDepth > 0 &&\n                    adaptations[i].contentType === 'video' &&\n                    manifest.timeShiftBufferDepth > adaptations[i].SegmentTemplate.SegmentTimeline.duration) {\n                    manifest.timeShiftBufferDepth = adaptations[i].SegmentTemplate.SegmentTimeline.duration;\n                }\n            }\n        }\n\n        if (manifest.timeShiftBufferDepth < manifest.minBufferTime) {\n            manifest.minBufferTime = manifest.timeShiftBufferDepth;\n        }\n\n        // Delete Content Protection under root manifest node\n        delete manifest.ContentProtection;\n        delete manifest.ContentProtection_asArray;\n\n        // In case of VOD streams, check if start time is greater than 0\n        // Then determine timestamp offset according to higher audio/video start time\n        // (use case = live stream delinearization)\n        if (manifest.type === 'static') {\n            for (i = 0; i < adaptations.length; i++) {\n                if (adaptations[i].contentType === 'audio' || adaptations[i].contentType === 'video') {\n                    segments = adaptations[i].SegmentTemplate.SegmentTimeline.S_asArray;\n                    startTime = segments[0].t / adaptations[i].SegmentTemplate.timescale;\n                    if (timestampOffset === undefined) {\n                        timestampOffset = startTime;\n                    }\n                    timestampOffset = Math.min(timestampOffset, startTime);\n                    // Correct content duration according to minimum adaptation's segments duration\n                    // in order to force <video> element sending 'ended' event\n                    manifest.mediaPresentationDuration = Math.min(manifest.mediaPresentationDuration, adaptations[i].SegmentTemplate.SegmentTimeline.duration);\n                }\n            }\n\n            // Patch segment templates timestamps and determine period start time (since audio/video should not be aligned to 0)\n            if (timestampOffset > 0) {\n                for (i = 0; i < adaptations.length; i++) {\n                    segments = adaptations[i].SegmentTemplate.SegmentTimeline.S_asArray;\n                    for (j = 0; j < segments.length; j++) {\n                        if (!segments[j].tManifest) {\n                            segments[j].tManifest = segments[j].t;\n                        }\n                        segments[j].t -= (timestampOffset * adaptations[i].SegmentTemplate.timescale);\n                    }\n                    if (adaptations[i].contentType === 'audio' || adaptations[i].contentType === 'video') {\n                        period.start = Math.max(segments[0].t, period.start);\n                        adaptations[i].SegmentTemplate.presentationTimeOffset = period.start;\n                    }\n                }\n                period.start /= manifest.timescale;\n            }\n        }\n\n        manifest.mediaPresentationDuration = Math.floor(manifest.mediaPresentationDuration * 1000) / 1000;\n        period.duration = manifest.mediaPresentationDuration;\n\n        return manifest;\n    }\n\n    function parseDOM(data) {\n\n        let xmlDoc = null;\n\n        if (window.DOMParser) {\n            let parser = new window.DOMParser();\n\n            xmlDoc = parser.parseFromString(data, 'text/xml');\n            if (xmlDoc.getElementsByTagName('parsererror').length > 0) {\n                throw new Error('parsing the manifest failed');\n            }\n        }\n\n        return xmlDoc;\n    }\n\n    function getMatchers() {\n        return null;\n    }\n\n    function getIron() {\n        return null;\n    }\n\n    function internalParse(data) {\n        let xmlDoc = null;\n        let manifest = null;\n\n        const startTime = window.performance.now();\n\n        // Parse the MSS XML manifest\n        xmlDoc = parseDOM(data);\n\n        const xmlParseTime = window.performance.now();\n\n        if (xmlDoc === null) {\n            return null;\n        }\n\n        // Convert MSS manifest into DASH manifest\n        manifest = processManifest(xmlDoc, new Date());\n\n        const mss2dashTime = window.performance.now();\n\n        log('Parsing complete: (xmlParsing: ' + (xmlParseTime - startTime).toPrecision(3) + 'ms, mss2dash: ' + (mss2dashTime - xmlParseTime).toPrecision(3) + 'ms, total: ' + ((mss2dashTime - startTime) / 1000).toPrecision(3) + 's)');\n\n        return manifest;\n    }\n\n    instance = {\n        parse: internalParse,\n        getMatchers: getMatchers,\n        getIron: getIron\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssParser.__dashjs_factory_name = 'MssParser';\nexport default dashjs.FactoryMaker.getClassFactory(MssParser); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @class\n * @ignore\n */\nclass DataChunk {\n    //Represents a data structure that keep all the necessary info about a single init/media segment\n    constructor() {\n        this.streamId = null;\n        this.mediaInfo = null;\n        this.segmentType = null;\n        this.quality = NaN;\n        this.index = NaN;\n        this.bytes = null;\n        this.start = NaN;\n        this.end = NaN;\n        this.duration = NaN;\n        this.representationId = null;\n        this.endFragment = null;\n    }\n}\n\nexport default DataChunk;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass FragmentRequest {\n    constructor() {\n        this.action = FragmentRequest.ACTION_DOWNLOAD;\n        this.startTime = NaN;\n        this.mediaType = null;\n        this.mediaInfo = null;\n        this.type = null;\n        this.duration = NaN;\n        this.timescale = NaN;\n        this.range = null;\n        this.url = null;\n        this.serviceLocation = null;\n        this.requestStartDate = null;\n        this.firstByteDate = null;\n        this.requestEndDate = null;\n        this.quality = NaN;\n        this.index = NaN;\n        this.availabilityStartTime = null;\n        this.availabilityEndTime = null;\n        this.wallStartTime = null;\n        this.bytesLoaded = NaN;\n        this.bytesTotal = NaN;\n        this.delayLoadingTime = NaN;\n        this.responseType = 'arraybuffer';\n        this.representationId = null;\n    }\n}\n\nFragmentRequest.ACTION_DOWNLOAD = 'download';\nFragmentRequest.ACTION_COMPLETE = 'complete';\n\nexport default FragmentRequest;\n"]}