{"version":3,"sources":["../../../../src/mss/MssFragmentInfoController.js"],"names":[],"mappings":"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","file":"MssFragmentInfoController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MssEvents from './MssEvents';\nimport MSSFragmentMoofProcessor from './MssFragmentMoofProcessor';\n\nfunction MssFragmentInfoController(config) {\n\n    config = config || {};\n    const context = this.context;\n\n    let instance;\n    let logger;\n    let fragmentModel;\n    let indexHandler;\n    let started;\n    let type;\n    let bufferTimeout;\n    let _fragmentInfoTime;\n    let startFragmentInfoDate;\n    let startTimeStampValue;\n    let deltaTime;\n    let segmentDuration;\n\n    const streamProcessor = config.streamProcessor;\n    const eventBus = config.eventBus;\n    const metricsModel = config.metricsModel;\n    const playbackController = config.playbackController;\n    const ISOBoxer = config.ISOBoxer;\n    const debug = config.debug;\n    const controllerType = 'MssFragmentInfoController';\n\n    function setup() {\n        logger = debug.getLogger(instance);\n    }\n\n    function initialize() {\n        started = false;\n\n        startFragmentInfoDate = null;\n        startTimeStampValue = null;\n        deltaTime = 0;\n        segmentDuration = NaN;\n\n        // register to stream processor as external controller\n        streamProcessor.registerExternalController(instance);\n        type = streamProcessor.getType();\n        fragmentModel = streamProcessor.getFragmentModel();\n        indexHandler = streamProcessor.getIndexHandler();\n    }\n\n    function getCurrentRepresentation() {\n        const representationController = streamProcessor.getRepresentationController();\n        const representation = representationController.getCurrentRepresentation();\n\n        return representation;\n    }\n\n    function sendRequest(request) {\n        fragmentModel.executeRequest(request);\n    }\n\n    function asFragmentInfoRequest(request) {\n        if (request && request.url) {\n            request.url = request.url.replace('Fragments', 'FragmentInfo');\n            request.type = 'FragmentInfoSegment';\n        }\n\n        return request;\n    }\n\n    function onFragmentRequest(request) {\n        // Check if current request signals end of stream\n        if ((request !== null) && (request.action === request.ACTION_COMPLETE)) {\n            doStop();\n            return;\n        }\n\n        if (request !== null) {\n            _fragmentInfoTime = request.startTime + request.duration;\n            request = asFragmentInfoRequest(request);\n\n            if (streamProcessor.getFragmentModel().isFragmentLoadedOrPending(request)) {\n                request = indexHandler.getNextSegmentRequest(getCurrentRepresentation());\n                onFragmentRequest(request);\n                return;\n            }\n\n            logger.debug('onFragmentRequest ' + request.url);\n\n            // Download the fragment info segment\n            sendRequest(request);\n        } else {\n            // No more fragment in current list\n            logger.debug('bufferFragmentInfo failed');\n        }\n    }\n\n    function bufferFragmentInfo() {\n        let segmentTime;\n\n        // Check if running state\n        if (!started) {\n            return;\n        }\n\n        logger.debug('Start buffering process...');\n\n        // Get next segment time\n        segmentTime = _fragmentInfoTime;\n\n        logger.debug('LoadNextFragment for time: ' + segmentTime);\n\n        const representation = getCurrentRepresentation();\n        const request = indexHandler.getSegmentRequestForTime(representation, segmentTime);\n        onFragmentRequest(request);\n    }\n\n    function delayLoadNextFragmentInfo(delay) {\n        const delayMs = Math.round(Math.min((delay * 1000), 2000));\n\n        logger.debug('Check buffer delta = ' + delayMs + ' ms');\n\n        clearTimeout(bufferTimeout);\n        bufferTimeout = setTimeout(function () {\n            bufferTimeout = null;\n            bufferFragmentInfo();\n        }, delayMs);\n    }\n\n    function onFragmentInfoLoadedCompleted(e) {\n        if (e.streamProcessor !== streamProcessor) {\n            return;\n        }\n\n        const request = e.fragmentInfo.request;\n        let deltaDate,\n            deltaTimeStamp;\n\n\n        if (!e.fragmentInfo.response) {\n            logger.error('Load error', request.url);\n            return;\n        }\n\n        segmentDuration = request.duration;\n        logger.debug('FragmentInfo loaded ', request.url);\n        try {\n            // update segment list\n            const mssFragmentMoofProcessor = MSSFragmentMoofProcessor(context).create({\n                metricsModel: metricsModel,\n                playbackController: playbackController,\n                ISOBoxer: ISOBoxer,\n                debug: debug\n            });\n            mssFragmentMoofProcessor.updateSegmentList(e.fragmentInfo, streamProcessor);\n\n            deltaDate = (new Date().getTime() - startFragmentInfoDate) / 1000;\n            deltaTimeStamp = (_fragmentInfoTime + segmentDuration) - startTimeStampValue;\n            deltaTime = (deltaTimeStamp - deltaDate) > 0 ? (deltaTimeStamp - deltaDate) : 0;\n            delayLoadNextFragmentInfo(deltaTime);\n        } catch (e) {\n            logger.fatal('Internal error while processing fragment info segment ');\n        }\n    }\n\n    function startPlayback() {\n        if (!started) {\n            return;\n        }\n\n        startFragmentInfoDate = new Date().getTime();\n        startTimeStampValue = _fragmentInfoTime;\n\n        logger.debug('startPlayback');\n\n        // Start buffering process\n        bufferFragmentInfo.call(this);\n    }\n\n    function doStart() {\n        let segments;\n\n        if (started === true) {\n            return;\n        }\n\n        eventBus.on(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance);\n\n        started = true;\n        logger.debug('Do start');\n\n        let representation = getCurrentRepresentation();\n        segments = representation.segments;\n\n        if (segments && segments.length > 0) {\n            _fragmentInfoTime = segments[segments.length - 1].presentationStartTime - segments[segments.length - 1].duration;\n\n            startPlayback();\n        } else {\n            indexHandler.updateSegmentList(representation);\n            segments = representation.segments;\n            if (segments && segments.length > 0) {\n                _fragmentInfoTime = segments[segments.length - 1].presentationStartTime - segments[segments.length - 1].duration;\n            }\n\n            startPlayback();\n        }\n    }\n\n    function doStop() {\n        if (!started) {\n            return;\n        }\n        logger.debug('Do stop');\n\n        eventBus.off(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance);\n\n        // Stop buffering process\n        clearTimeout(bufferTimeout);\n        started = false;\n\n        startFragmentInfoDate = null;\n        startTimeStampValue = null;\n    }\n\n    function getType() {\n        return type;\n    }\n\n    function reset() {\n        doStop();\n        streamProcessor.unregisterExternalController(instance);\n    }\n\n    instance = {\n        initialize: initialize,\n        controllerType: controllerType,\n        start: doStart,\n        getType: getType,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssFragmentInfoController.__dashjs_factory_name = 'MssFragmentInfoController';\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentInfoController); /* jshint ignore:line */\n"]}